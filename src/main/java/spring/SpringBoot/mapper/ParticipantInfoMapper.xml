<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.SpringBoot.mapper.ParticipantInfoMapper">
  <resultMap id="BaseResultMap" type="spring.SpringBoot.entry.ParticipantInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="token_id" jdbcType="VARCHAR" property="tokenId" />
    <result column="participant_address" jdbcType="VARCHAR" property="participantAddress" />
    <result column="raffleAddress" jdbcType="VARCHAR" property="raffleaddress" />
    <result column="ticket" jdbcType="INTEGER" property="ticket" />
    <result column="from" jdbcType="INTEGER" property="from" />
    <result column="to" jdbcType="INTEGER" property="to" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, token_id, participant_address, raffleAddress, ticket, `from`, `to`, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from participant_info
    where id = #{id,jdbcType=INTEGER}
  </select>
<!--  <select id="getParticipantInfosGroupByRaffleAddress" parameterType="java.lang.String" resultMap="BaseResultMap">-->
<!--    SELECT raffleAddress,participant_address, SUM(ticket) AS totalTicket-->
<!--    FROM participant_info-->
<!--    where participant_address = #{participantAddress,jdbcType=VARCHAR}-->
<!--    GROUP BY raffleAddress;-->
<!--  </select>-->
  <select id="getParticipantInfosGroupByRaffleAddress" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT pi.raffleAddress, pi.participant_address, SUM(pi.ticket) AS totalTicket
    FROM participant_info pi
    JOIN raffle_info ri ON pi.raffleAddress = ri.raffleAddress
    JOIN token_info ti ON ri.contract_address = ti.contract_address AND ri.token_id = ti.token_id
    WHERE pi.participant_address = #{participantAddress,jdbcType=VARCHAR}
    <if test="chainId != 'All'">
      AND ti.chain = #{chainId}
    </if>
    GROUP BY pi.raffleAddress
    LIMIT #{limit} OFFSET #{offset}
</select>
  <select id="getParticipantInfos" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from participant_info
    where participant_address = #{participantAddress,jdbcType=VARCHAR}
  </select>


  <select id="getParticipantInfosByRaffleAddress" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from participant_info
    where raffleAddress = #{raffleaddress,jdbcType=VARCHAR}
  </select>

  <select id="ParticipantInfos" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from participant_info
    where raffleAddress = #{raffleaddress,jdbcType=VARCHAR}
  </select>

  <select id="getParticipantCount"  parameterType="java.lang.String" resultType="java.lang.Integer">
    select SUM(ticket) AS totalTicket
    from participant_info
    where raffleAddress = #{raffleaddress,jdbcType=VARCHAR}
  </select>

  <select id="getMytickets"  parameterType="java.lang.String" resultType="java.lang.Integer">
    select SUM(ticket) AS totalTicket
    from participant_info
    where raffleAddress = #{raffleaddress,jdbcType=VARCHAR} and participant_address = #{participantAddress,jdbcType=VARCHAR}
  </select>


  <select id="getParticipantInfosByParticipantInfo"  parameterType="spring.SpringBoot.entry.ParticipantInfo"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from participant_info
    where raffleAddress = #{raffleaddress,jdbcType=VARCHAR} and participant_address = #{participantAddress,jdbcType=VARCHAR}
    and `from` = #{from,jdbcType=INTEGER} and `to` = #{to,jdbcType=INTEGER}
  </select>



  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from participant_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="spring.SpringBoot.entry.ParticipantInfo" useGeneratedKeys="true">
    insert into participant_info (token_id, participant_address, raffleAddress,
      ticket, `from`, `to`, create_time, update_time
      )
    values (#{tokenId,jdbcType=VARCHAR}, #{participantAddress,jdbcType=VARCHAR}, #{raffleaddress,jdbcType=VARCHAR},
      #{ticket,jdbcType=INTEGER}, #{from,jdbcType=INTEGER},#{to,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="spring.SpringBoot.entry.ParticipantInfo" useGeneratedKeys="true">
    insert into participant_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="tokenId != null">
        token_id,
      </if>
      <if test="participantAddress != null">
        participant_address,
      </if>
      <if test="raffleaddress != null">
        raffleAddress,
      </if>
      <if test="ticket != null">
        ticket,
      </if>
      <if test="from != null">
        `from`,
      </if>
      <if test="to != null">
        `to`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="tokenId != null">
        #{tokenId,jdbcType=VARCHAR},
      </if>
      <if test="participantAddress != null">
        #{participantAddress,jdbcType=VARCHAR},
      </if>
      <if test="raffleaddress != null">
        #{raffleaddress,jdbcType=VARCHAR},
      </if>
      <if test="ticket != null">
        #{ticket,jdbcType=INTEGER},
      </if>
      <if test="from != null">
        #{from,jdbcType=INTEGER},
      </if>
      <if test="to != null">
        #{to,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="spring.SpringBoot.entry.ParticipantInfo">
    update participant_info
    <set>
      <if test="tokenId != null">
        token_id = #{tokenId,jdbcType=VARCHAR},
      </if>
      <if test="participantAddress != null">
        participant_address = #{participantAddress,jdbcType=VARCHAR},
      </if>
      <if test="raffleaddress != null">
        raffleAddress = #{raffleaddress,jdbcType=VARCHAR},
      </if>
      <if test="ticket != null">
        ticket = #{ticket,jdbcType=INTEGER},
      </if>
      <if test="from != null">
        `from` = #{from,jdbcType=INTEGER},
      </if>
      <if test="to != null">
        `to` = #{to,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="spring.SpringBoot.entry.ParticipantInfo">
    update participant_info
    set token_id = #{tokenId,jdbcType=VARCHAR},
      participant_address = #{participantAddress,jdbcType=VARCHAR},
        raffleAddress = #{raffleaddress,jdbcType=VARCHAR},
      ticket = #{ticket,jdbcType=INTEGER},
      `from` = #{from,jdbcType=INTEGER},
      `to` = #{to,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>