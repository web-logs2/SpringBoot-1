<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.SpringBoot.mapper.TokenInfoMapper">
  <resultMap id="BaseResultMap" type="spring.SpringBoot.entry.TokenInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="token_id" jdbcType="VARCHAR" property="tokenId" />
    <result column="contract_address" jdbcType="VARCHAR" property="contractAddress" />
    <result column="owner" jdbcType="VARCHAR" property="owner" />
    <result column="nftStandard_id" jdbcType="INTEGER" property="nftstandardId" />
    <result column="image" jdbcType="VARCHAR" property="image" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="chain" jdbcType="VARCHAR" property="chain" />
    <result column="desc" jdbcType="VARCHAR" property="desc" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, token_id, contract_address, `owner`, nftStandard_id, image, `name`,`chain`, `desc`, create_time,
    update_time
  </sql>
  <select id="selectByOwner" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from token_info
    where owner = #{owner,jdbcType=VARCHAR}
  </select>
  <select id="selectByTokenId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from token_info
    where contract_address = #{contractAddress,jdbcType=VARCHAR} and token_id = #{tokenId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from token_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByTokenId"  parameterType="java.lang.String" >
    delete from token_info
    where contract_address = #{contractAddress,jdbcType=VARCHAR} and token_id = #{tokenId,jdbcType=VARCHAR}
  </delete>

  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="spring.SpringBoot.entry.TokenInfo" useGeneratedKeys="true">
    insert into token_info (token_id, contract_address, `owner`, 
      nftStandard_id, image, `name`, `chain`,
      `desc`, create_time, update_time
      )
    values (#{tokenId,jdbcType=VARCHAR}, #{contractAddress,jdbcType=VARCHAR}, #{owner,jdbcType=VARCHAR}, 
      #{nftstandardId,jdbcType=INTEGER}, #{image,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{chain,jdbcType=VARCHAR},
      #{desc,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="spring.SpringBoot.entry.TokenInfo" useGeneratedKeys="true">
    insert into token_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="tokenId != null">
        token_id,
      </if>
      <if test="contractAddress != null">
        contract_address,
      </if>
      <if test="owner != null">
        `owner`,
      </if>
      <if test="nftstandardId != null">
        nftStandard_id,
      </if>
      <if test="image != null">
        image,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="chain != null">
        `chain`,
      </if>
      <if test="desc != null">
        `desc`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="tokenId != null">
        #{tokenId,jdbcType=VARCHAR},
      </if>
      <if test="contractAddress != null">
        #{contractAddress,jdbcType=VARCHAR},
      </if>
      <if test="owner != null">
        #{owner,jdbcType=VARCHAR},
      </if>
      <if test="nftstandardId != null">
        #{nftstandardId,jdbcType=INTEGER},
      </if>
      <if test="image != null">
        #{image,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="chain != null">
        #{chain,jdbcType=VARCHAR},
      </if>
      <if test="desc != null">
        #{desc,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="spring.SpringBoot.entry.TokenInfo">
    update token_info
    <set>
      <if test="tokenId != null">
        token_id = #{tokenId,jdbcType=VARCHAR},
      </if>
      <if test="contractAddress != null">
        contract_address = #{contractAddress,jdbcType=VARCHAR},
      </if>
      <if test="owner != null">
        `owner` = #{owner,jdbcType=VARCHAR},
      </if>
      <if test="nftstandardId != null">
        nftStandard_id = #{nftstandardId,jdbcType=INTEGER},
      </if>
      <if test="image != null">
        image = #{image,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="chain != null">
        `chain` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="desc != null">
        `desc` = #{desc,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="spring.SpringBoot.entry.TokenInfo">
    update token_info
    set token_id = #{tokenId,jdbcType=VARCHAR},
      contract_address = #{contractAddress,jdbcType=VARCHAR},
      `owner` = #{owner,jdbcType=VARCHAR},
      nftStandard_id = #{nftstandardId,jdbcType=INTEGER},
      image = #{image,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      `chain` = #{chain,jdbcType=VARCHAR},
      `desc` = #{desc,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateOwnerInt">
    update token_info
    <set>
      <if test="owner != null">
        `owner` = #{owner,jdbcType=VARCHAR},
      </if>
    </set>
    where contract_address = #{contractAddress,jdbcType=VARCHAR} and token_id = #{tokenId,jdbcType=VARCHAR}
  </update>
</mapper>