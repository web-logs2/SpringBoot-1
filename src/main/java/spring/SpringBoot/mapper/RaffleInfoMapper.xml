<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.SpringBoot.mapper.RaffleInfoMapper">
    <resultMap id="BaseResultMap" type="spring.SpringBoot.entry.RaffleInfo">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="raffleAddress" jdbcType="VARCHAR" property="raffleaddress" />
        <result column="owner" jdbcType="VARCHAR" property="owner" />
        <result column="token_id" jdbcType="VARCHAR" property="tokenId" />
        <result column="contract_address" jdbcType="VARCHAR" property="contractAddress" />
        <result column="tickets" jdbcType="INTEGER" property="tickets" />
        <result column="ticketPrice" jdbcType="FLOAT" property="ticketprice" />
        <result column="startTimestamp" jdbcType="BIGINT" property="starttimestamp" />
        <result column="endTimestamp" jdbcType="BIGINT" property="endtimestamp" />
        <result column="raffleStatus" jdbcType="INTEGER" property="rafflestatus" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="king" jdbcType="VARCHAR" property="king" />
        <result column="swap_status" jdbcType="INTEGER" property="swapStatus" />
        <result column="cancelled_extracted_status" jdbcType="INTEGER" property="cancelledExtractedStatus" />
        <result column="raffle_assets" jdbcType="INTEGER" property="raffleAssets" />
        <result column="winnerDrawTimestamp" jdbcType="BIGINT" property="winnerDrawTimestamp" />
        <result column="winner_ticket_number" jdbcType="BIGINT" property="winnerTicketNumber" />
    </resultMap>
    <sql id="Base_Column_List">
        id, raffleAddress, `owner`, token_id, contract_address, tickets, ticketPrice, startTimestamp,
    endTimestamp, raffleStatus, create_time, update_time, king, swap_status,cancelled_extracted_status,
    raffle_assets,winnerDrawTimestamp,winner_ticket_number
    </sql>
    <select id="getDetailByRaffleAddress" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from raffle_info
        where raffleAddress = #{raffleaddress,jdbcType=VARCHAR}
    </select>
    <select id="getRaffleInfoByCondition" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from raffle_info
        where `owner` = #{owner,jdbcType=VARCHAR} and contract_address = #{contractAddress,jdbcType=VARCHAR} and
        token_id = #{tokenId,jdbcType=VARCHAR} and rafflestatus IN (0, 1, 2, 3)
    </select>

    <select id="getExecSwapRaffleInfos" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from raffle_info
        WHERE swap_status = 0 AND king IS NOT NULL AND UNIX_TIMESTAMP(NOW()) > (winnerDrawTimestamp + (2 * 24 * 60 * 60))
    </select>

    <select id="getWaitingForNftRaffleInfos" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from raffle_info
        WHERE LOWER(`owner`) = LOWER(#{owner,jdbcType=VARCHAR}) and LOWER(token_id) = LOWER(#{tokenId,jdbcType=VARCHAR}) and
        LOWER(contract_address) = LOWER(#{contractAddress,jdbcType=VARCHAR}) and raffleStatus = 0
    </select>

    <select id="getTransferAllIfCancelledRaffleInfos" resultMap="BaseResultMap">
        select
              ri.id, ri.raffleAddress, ri.owner, ri.token_id, ri.contract_address, ri.tickets, ri.ticketPrice, ri.startTimestamp,
              ri.endTimestamp, ri.raffleStatus, ri.create_time, ri.update_time, ri.king, ri.swap_status,ri.cancelled_extracted_status,
              ri.raffle_assets,ri.winnerDrawTimestamp
        from raffle_info ri
--         JOIN participant_info pi ON ri.raffleAddress = pi.raffleAddress
        WHERE ri.rafflestatus = 5 AND ri.raffle_assets != 0 AND (UNIX_TIMESTAMP(NOW()) > ri.endTimestamp + (2 * 24 * 60 * 60) )
    </select>

    <select id="getCancelIfUnsoldRaffleInfos" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from raffle_info
        WHERE rafflestatus IN (1, 2) AND UNIX_TIMESTAMP(NOW()) > (endTimestamp+ (2 * 24 * 60 * 60))
    </select>

    <select id="getExecRetryIfNoRNGRaffleInfos" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from raffle_info
        WHERE rafflestatus IN ( 3 ) AND UNIX_TIMESTAMP(NOW()) > (endTimestamp+ (1 * 24 * 60 * 60))
    </select>

    <select id="getRaffleInfoListByOwner" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from raffle_info
        where `owner` = #{owner,jdbcType=VARCHAR}
    </select>

    <select id="findAll" parameterType="map" resultMap="BaseResultMap">
        SELECT
        ri.id, ri.raffleAddress, ri.owner, ri.token_id, ri.contract_address, ri.tickets, ri.ticketPrice, ri.startTimestamp,
        ri.endTimestamp, ri.raffleStatus, ri.create_time, ri.update_time, ri.king, ri.swap_status,ri.cancelled_extracted_status,
        ri.raffle_assets,ri.winnerDrawTimestamp
        FROM raffle_info ri
        JOIN token_info ti
        ON ri.contract_address = ti.contract_address
        AND ri.token_id = ti.token_id
        <if test="chainId != 'All'">
            WHERE ti.chain = #{chainId}
        </if>
        <if test="owner != null">
            AND ri.owner = #{owner}
        </if>
        ORDER BY ri.id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from raffle_info
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="spring.SpringBoot.entry.RaffleInfo"
            useGeneratedKeys="true">
        insert into raffle_info (raffleAddress, `owner`, token_id,
                                 contract_address, tickets, ticketPrice,
                                 startTimestamp, endTimestamp, raffleStatus,
                                 create_time, update_time, king,
                                 swap_status, cancelled_extracted_status,winnerDrawTimestamp,winner_ticket_number)
        values (#{raffleaddress,jdbcType=VARCHAR}, #{owner,jdbcType=VARCHAR}, #{tokenId,jdbcType=VARCHAR},
                #{contractAddress,jdbcType=VARCHAR}, #{tickets,jdbcType=INTEGER}, #{ticketprice,jdbcType=FLOAT},
                #{starttimestamp,jdbcType=BIGINT}, #{endtimestamp,jdbcType=BIGINT}, #{rafflestatus,jdbcType=INTEGER},
                #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{king,jdbcType=VARCHAR},
                #{swapStatus,jdbcType=INTEGER},#{cancelledExtractedStatus,jdbcType=INTEGER}, #{winnerDrawTimestamp,jdbcType=BIGINT},
                #{winnerTicketNumber,jdbcType=BIGINT})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="spring.SpringBoot.entry.RaffleInfo"
            useGeneratedKeys="true">
        insert into raffle_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="raffleaddress != null">
                raffleAddress,
            </if>
            <if test="owner != null">
                `owner`,
            </if>
            <if test="tokenId != null">
                token_id,
            </if>
            <if test="contractAddress != null">
                contract_address,
            </if>
            <if test="tickets != null">
                tickets,
            </if>
            <if test="ticketprice != null">
                ticketPrice,
            </if>
            <if test="starttimestamp != null">
                startTimestamp,
            </if>
            <if test="endtimestamp != null">
                endTimestamp,
            </if>
            <if test="rafflestatus != null">
                raffleStatus,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="king != null">
                king,
            </if>
            <if test="swapStatus != null">
                swap_status,
            </if>
            <if test="cancelledExtractedStatus != null">
                cancelled_extracted_status,
            </if>
            <if test="winnerDrawTimestamp != null">
              winnerDrawTimestamp,
            </if>
            <if test="winnerTicketNumber != null">
                winner_ticket_number,
            </if>

        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="raffleaddress != null">
                #{raffleaddress,jdbcType=VARCHAR},
            </if>
            <if test="owner != null">
                #{owner,jdbcType=VARCHAR},
            </if>
            <if test="tokenId != null">
                #{tokenId,jdbcType=VARCHAR},
            </if>
            <if test="contractAddress != null">
                #{contractAddress,jdbcType=VARCHAR},
            </if>
            <if test="tickets != null">
                #{tickets,jdbcType=INTEGER},
            </if>
            <if test="ticketprice != null">
                #{ticketprice,jdbcType=FLOAT},
            </if>
            <if test="starttimestamp != null">
                #{starttimestamp,jdbcType=BIGINT},
            </if>
            <if test="endtimestamp != null">
                #{endtimestamp,jdbcType=BIGINT},
            </if>
            <if test="rafflestatus != null">
                #{rafflestatus,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="king != null">
                #{king,jdbcType=VARCHAR},
            </if>
            <if test="swapStatus != null">
                #{swapStatus,jdbcType=INTEGER},
            </if>
            <if test="cancelledExtractedStatus != null">
                #{cancelledExtractedStatus,jdbcType=INTEGER},
            </if>

            <if test="winnerDrawTimestamp != null">
                #{winnerDrawTimestamp,jdbcType=BIGINT},
            </if>
            <if test="winnerTicketNumber != null">
                #{winnerTicketNumber,jdbcType=BIGINT},
            </if>

        </trim>
    </insert>
    <update id="updateRaffleInfo" parameterType="spring.SpringBoot.entry.RaffleInfo">
        update raffle_info
        <set>
            <if test="rafflestatus != null">
                raffleStatus = #{rafflestatus,jdbcType=INTEGER},
            </if>
            <if test="king != null">
                king = #{king,jdbcType=VARCHAR},
            </if>
            <if test="swapStatus != null">
                swap_status = #{swapStatus,jdbcType=INTEGER},
            </if>
            <if test="cancelledExtractedStatus != null">
                cancelled_extracted_status = #{cancelledExtractedStatus,jdbcType=INTEGER},
            </if>
            <if test="raffleAssets != null">
                raffle_assets = #{raffleAssets,jdbcType=INTEGER},
            </if>

            <if test="winnerDrawTimestamp != null">
                winnerDrawTimestamp = #{winnerDrawTimestamp,jdbcType=INTEGER},
            </if>
            <if test="winnerTicketNumber != null">
                winner_ticket_number = #{winnerTicketNumber,jdbcType=INTEGER},
            </if>

            update_time = CURRENT_TIMESTAMP
        </set>
        where raffleAddress = #{raffleaddress,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="spring.SpringBoot.entry.RaffleInfo">
        update raffle_info
        set raffleAddress = #{raffleaddress,jdbcType=VARCHAR},
            `owner` = #{owner,jdbcType=VARCHAR},
            token_id = #{tokenId,jdbcType=VARCHAR},
            contract_address = #{contractAddress,jdbcType=VARCHAR},
            tickets = #{tickets,jdbcType=INTEGER},
            ticketPrice = #{ticketprice,jdbcType=FLOAT},
            startTimestamp = #{starttimestamp,jdbcType=BIGINT},
            endTimestamp = #{endtimestamp,jdbcType=BIGINT},
            raffleStatus = #{rafflestatus,jdbcType=INTEGER},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            king = #{king,jdbcType=VARCHAR},
            swap_status = #{swapStatus,jdbcType=INTEGER},
            cancelled_extracted_status = #{cancelledExtractedStatus,jdbcType=INTEGER},
            winnerDrawTimestamp = #{winnerDrawTimestamp,jdbcType=BIGINT},
            winner_ticket_number = #{winnerTicketNumber,jdbcType=BIGINT}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>
